<CustomTooltip>
    <MainContent>
        <div class="dot" style="height: @Height; width: @Width; background-color: @Color;"></div>
    </MainContent>
    <TooltipContent>
        @switch (FixtureDotType)
        {
            case FixtureDotTypes.Difficulty:
                {
                    <FixtureDisplay Fixtures="TooltipFixture" TeamId="ComparisonTeamId" />
                    break;
                }
            case FixtureDotTypes.Result:
                {
                    <ResultDisplay Fixture="Fixture" />
                    break;
                }
        }
    </TooltipContent>
</CustomTooltip>


@code {
    [Parameter]
    public int ComparisonTeamId { get; set; }

    [Parameter]
    public int Size { get; set; } = 25;

    [Parameter]
    public FixtureViewModel? Fixture { get; set; }

    [Parameter]
    public FixtureDotTypes FixtureDotType { get; set; }

    public string Height => $"{ Size }px";
    public string Width => $"{ Size }px";
    public string Color => SetColor();
    public List<FixtureViewModel> TooltipFixture => Fixture == null ? null : new() { Fixture };

    private string SetColor()
    {
        var teamIsHome = Fixture?.HomeTeam?.TeamId == ComparisonTeamId;

        switch (FixtureDotType)
        {
            case FixtureDotTypes.Result:
                {
                    return FixtureHelpers.GetFixtureResultColor(ComparisonTeamId, Fixture);
                }
            case FixtureDotTypes.Difficulty:
                {
                    return teamIsHome ? FixtureHelpers.GetFixtureDifficultyColor(Fixture?.HomeTeam?.Difficulty ?? 0) : FixtureHelpers.GetFixtureDifficultyColor(Fixture?.AwayTeam?.Difficulty ?? 0);
                }
            default: return "#E7E7E7";
        }
    }
}